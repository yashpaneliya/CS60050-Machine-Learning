from typing import List, Tuple
from math import pi, exp
from statistics import mean, stdev

class GaussianNaiveBayes:
    def __init__(self):
        self.prior = dict()
        self.mean = dict()
        self.std = dict()
        
    def train(self, X: List[List[float]], y: List[int]):
        # Count the number of samples for each class
        class_counts = dict()
        for label in y:
            if label not in class_counts:
                class_counts[label] = 0
            class_counts[label] += 1
        
        # Calculate the prior probability for each class
        for label, count in class_counts.items():
            self.prior[label] = count / len(y)
        
        # Calculate the mean and standard deviation for each feature for each class
        for label in class_counts.keys():
            X_label = [x for i, x in enumerate(X) if y[i] == label]
            self.mean[label] = [mean(feature) for feature in zip(*X_label)]
            self.std[label] = [stdev(feature) for feature in zip(*X_label)]

    def predict(self, X: List[List[float]]) -> List[Tuple[int, float]]:
        predictions = []
        for x in X:
            prob = dict()
            for label in self.prior.keys():
                prob[label] = self.prior[label]
                for feature, mean, std in zip(x, self.mean[label], self.std[label]):
                    prob[label] *= (1 / (std * sqrt(2 * pi))) * exp(-((feature - mean) ** 2) / (2 * (std ** 2)))
            predictions.append((max(prob, key=prob.get), prob[max(prob, key=prob.get)]))
        return predictions
